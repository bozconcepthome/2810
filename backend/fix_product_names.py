import asyncio
import json
from motor.motor_asyncio import AsyncIOMotorClient
import os

async def fix_product_names():
    """Fix product names by extracting clean names from descriptions"""
    
    # MongoDB baÄŸlantÄ±sÄ±
    mongo_url = os.environ.get('MONGO_URL')
    client = AsyncIOMotorClient(mongo_url)
    db = client["boz_concept"]
    
    # JSON dosyasÄ±nÄ± oku
    with open('/app/backend/products_data.json', 'r', encoding='utf-8') as f:
        products_data = json.load(f)
    
    print(f"ðŸ“¦ {len(products_data)} Ã¼rÃ¼n verisi bulundu")
    
    # TÃ¼m Ã¼rÃ¼nleri al
    all_products = await db.products.find().to_list(length=1000)
    print(f"ðŸ’¾ VeritabanÄ±nda {len(all_products)} Ã¼rÃ¼n var")
    
    updated_count = 0
    
    # Her Ã¼rÃ¼n iÃ§in temiz isim Ã§Ä±kar
    for i, product_data in enumerate(products_data, 1):
        description = product_data.get('description', '')
        barcode = product_data.get('barcode', '')
        
        if not description:
            continue
            
        # Description'dan daha akÄ±llÄ± isim Ã§Ä±karma
        # Ä°lk 3-6 kelimeyi al, ancak belirli kelimelerde dur
        words = description.split()
        
        # DurmamÄ±z gereken kelimeler
        stop_words = [
            'mutfak', 'banyo', 'dÃ¼zenleyici', 'organizer', 
            'organize', 'dekoratif', 'Ã§ok', 'amaÃ§lÄ±',
            'kullanÄ±m', 'iÃ§in', 've', 'ile'
        ]
        
        clean_name_words = []
        for word in words:
            word_lower = word.lower()
            
            # Stop word'e rastladÄ±ysak dur
            if word_lower in stop_words:
                if len(clean_name_words) >= 3:  # En az 3 kelime varsa dur
                    break
            else:
                clean_name_words.append(word)
                
            # Maksimum 8 kelime
            if len(clean_name_words) >= 8:
                break
        
        clean_name = ' '.join(clean_name_words).strip()
        
        # EÄŸer Ã§ok kÄ±sa kaldÄ±ysa, ilk 5 kelimeyi al
        if len(clean_name_words) < 2:
            clean_name = ' '.join(words[:5]).strip()
        
        # VeritabanÄ±nda bu barkoda sahip Ã¼rÃ¼nÃ¼ bul ve gÃ¼ncelle
        if barcode:
            result = await db.products.update_one(
                {'barcode': barcode},
                {'$set': {'product_name': clean_name}}
            )
            
            if result.modified_count > 0:
                updated_count += 1
                if updated_count <= 10:  # Ä°lk 10 gÃ¼ncellemeyi gÃ¶ster
                    print(f"\nâœ… GÃ¼ncellendi ({updated_count}):")
                    print(f"   Barkod: {barcode}")
                    print(f"   Yeni isim: {clean_name}")
    
    print(f"\n\nðŸŽ‰ Toplam {updated_count} Ã¼rÃ¼n ismi gÃ¼ncellendi!")
    
    # Kontrol iÃ§in birkaÃ§ Ã¼rÃ¼n gÃ¶ster
    print("\nðŸ“‹ GÃ¼ncel Ã¼rÃ¼n Ã¶rnekleri:")
    sample_products = await db.products.find().limit(5).to_list(length=5)
    for i, p in enumerate(sample_products, 1):
        print(f"\n{i}. {p.get('product_name')}")
        print(f"   AÃ§Ä±klama: {p.get('description', '')[:60]}...")
    
    client.close()

if __name__ == "__main__":
    asyncio.run(fix_product_names())
